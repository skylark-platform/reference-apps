name: Deploy App
on:
  push:
    branches:
      - main
  pull_request:
concurrency:
  group: deploy-app-${{ github.ref }}
env:
  pr-comment-id: reference-apps-deployment
  pr-comment-title: "Reference Apps Deployment"
jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      git-branch: ${{ steps.branch-and-ref.outputs.branch }}
      git-ref: ${{ steps.branch-and-ref.outputs.ref }}
    steps:
      - uses: actions/checkout@v3
      - name: Comment building status on PR
        uses: ostmodern/comment-url-on-pr@v1
        with:
          title: ${{ env.pr-comment-title }}
          comment_id: ${{ env.pr-comment-id }}
          status: building
          github_token: ${{ github.token }}
      - name: Get branch and ref
        id: branch-and-ref
        run: |
          echo "github.event_name = ${{ github.event_name }}"
          echo "github.ref = ${{ github.ref }}"
          echo "github.event.ref = ${{ github.event.ref }}"

          # If the event is delete, use the event ref
          if [ "${{ github.event_name }}" = delete ]; then
            GitRef="${{ github.event.ref }}"
          elif [ "${{ github.event_name }}" = pull_request ]; then
            GitRef="${{ github.head_ref }}"
          else
            GitRef="${{ github.ref }}"
          fi
          GitBranch=$(echo ${GitRef#refs/heads/})

          echo "Git Ref: $GitRef"
          echo "Git Branch Name: $GitBranch"

          echo "::set-output name=ref::$GitRef"
          echo "::set-output name=branch::$GitBranch"

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: prepare
    outputs:
      url: ${{ steps.cdk.outputs.url }}
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/deploy
        id: cdk
        with:
          git-branch: ${{ needs.prepare.outputs.git-branch }}
          # hardcode domains until more accounts are supported
          base-domain: skylark-dev.skylarkplatform.io
          skylark-api-url: https://api.showcase-test.eng-james-wallis.skylarkplatform.io
          cognito-aws-region: ${{ secrets.NEXT_PUBLIC_COGNITO_AWS_REGION }}
          cognito-client-id: ${{ secrets.NEXT_PUBLIC_COGNITO_CLIENT_ID }}
          cognito-user-pool-id: ${{ secrets.NEXT_PUBLIC_COGNITO_USER_POOL_ID }}
          cognito-email: ${{ secrets.COGNITO_EMAIL }}
          cognito-password: ${{ secrets.COGNITO_PASSWORD }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_SKYLARK_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_SKYLARK_DEV }}

  ingestor:
    name: Content Ingestor
    runs-on: ubuntu-latest
    needs: [prepare, deploy]
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/run-ingestor
        with:
          airtable-api-key: ${{ secrets.AIRTABLE_SUPPORT_KEY }}
          airtable-base-id: ${{ secrets.AIRTABLE_BASE_ID }}
          skylark-api-url: https://api.showcase-test.eng-james-wallis.skylarkplatform.io
          cognito-aws-region: ${{ secrets.NEXT_PUBLIC_COGNITO_AWS_REGION }}
          cognito-client-id: ${{ secrets.NEXT_PUBLIC_COGNITO_CLIENT_ID }}
          cognito-user-pool-id: ${{ secrets.NEXT_PUBLIC_COGNITO_USER_POOL_ID }}
          cognito-email: ${{ secrets.COGNITO_EMAIL }}
          cognito-password: ${{ secrets.COGNITO_PASSWORD }}

  signal:
    name: Signal
    runs-on: ubuntu-latest
    needs: [deploy, ingestor]
    if: always()
    steps:
      - uses: actions/github-script@v6
        id: additional-urls
        with:
          result-encoding: string
          script: |
            const json = JSON.stringify([
              { label: "Media", value: "${{ needs.deploy.outputs.url }}" },
            ]);
            return json;
      - uses: technote-space/workflow-conclusion-action@v2
      - name: Comment status on PR
        uses: ostmodern/comment-url-on-pr@v1
        with:
          title: ${{ env.pr-comment-title }}
          comment_id: ${{ env.pr-comment-id }}
          status: ${{ env.WORKFLOW_CONCLUSION }}
          github_token: ${{ github.token }}
          additional_urls: ${{ steps.additional-urls.outputs.result }}

  lighthouse-check:
    name: Lighthouse
    runs-on: ubuntu-latest
    needs: [deploy, ingestor]
    steps:
      - uses: actions/checkout@master
      - name: Lighthouse
        uses: foo-software/lighthouse-check-action@master
        with:
          device: "all"
          urls: ${{ needs.deploy.outputs.url }},${{ needs.deploy.outputs.url }}/movies
          gitHubAccessToken: ${{ github.token }}
          slackWebhookUrl: ${{ secrets.SLACK_ALERTS_FE_TESTING }}
          gitAuthor: ${{ github.actor }}
          gitBranch: ${{ github.ref }}
          sha: ${{ github.sha }}
          prCommentEnabled: true
