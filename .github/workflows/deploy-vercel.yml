name: Vercel Deployment
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
on:
  push:
jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      git-branch: ${{ steps.get-branch.outputs.branch }}
    steps:
      - uses: actions/checkout@v3
      - name: Get branch
        id: get-branch
        run: |
          echo "github.event_name = ${{ github.event_name }}"
          echo "github.ref = ${{ github.ref }}"
          echo "github.event.ref = ${{ github.event.ref }}"

          # If the event is delete, use the event ref
          if [ "${{ github.event_name }}" = delete ]; then
            GitRef="${{ github.event.ref }}"
          elif [ "${{ github.event_name }}" = pull_request ]; then
            GitRef="${{ github.head_ref }}"
          else
            GitRef="${{ github.ref }}"
          fi
          GitBranch=$(echo ${GitRef#refs/heads/})

          echo "Git Ref: $GitRef"
          echo "Git Branch Name: $GitBranch"

          echo "::set-output name=branch::$GitBranch"

  deploy-saas:
    name: Deploy (SaaS)
    runs-on: ubuntu-latest
    needs: prepare
    env:
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_SAAS }}
      VERCEL_ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }}
      NEXT_PUBLIC_SAAS_ACCOUNT_ID: ${{ needs.prepare.outputs.git-branch }}
    steps:
      - uses: actions/checkout@v3
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${{ env.VERCEL_ENVIRONMENT }} --token=${{ secrets.VERCEL_TOKEN }}
      - name: Development Build
        if: github.ref != 'refs/heads/main'
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Production build
        if: github.ref == 'refs/heads/main'
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

  ingestor:
    name: Content Ingestor (SaaS)
    runs-on: ubuntu-latest
    needs: prepare
    env:
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_SAAS }}
      VERCEL_ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }}
    steps:
      - uses: actions/checkout@v3
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel env pull --yes --environment=${{ env.VERCEL_ENVIRONMENT }} --token=${{ secrets.VERCEL_TOKEN }}
      - id: dotenv
        uses: falti/dotenv-action@v1.0.1
      - uses: ./.github/actions/run-ingestor
        with:
          airtable-api-key: ${{ steps.dotenv.outputs.airtable_api_key }}
          airtable-base-id: ${{ steps.dotenv.outputs.airtable_base_id }}
          skylark-api-url: ${{ steps.dotenv.outputs.next_public_saas_api_endpoint }}
          create-additional-objects: "true"
          saas-ingest: "true"
          saas-api-token: ${{ steps.dotenv.outputs.next_public_saas_api_key }}
          saas-account-id: ${{ needs.prepare.outputs.git-branch }}
