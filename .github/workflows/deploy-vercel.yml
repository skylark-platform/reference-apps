name: Vercel Deployment
on:
  push:
    branches:
      - main
  pull_request:
concurrency:
  group: deploy-vercel-${{ github.ref }}
  cancel-in-progress: true
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }}
  pr-comment-id: reference-apps-deployment
  pr-comment-title: "Reference Apps Deployment"
jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      git-branch: ${{ steps.get-branch.outputs.branch }}
    steps:
      - uses: actions/checkout@v3
      - name: Comment building status on PR
        uses: ostmodern/comment-url-on-pr@v1
        with:
          title: ${{ env.pr-comment-title }}
          comment_id: ${{ env.pr-comment-id }}
          status: building
          github_token: ${{ github.token }}
      - name: Get branch
        id: get-branch
        run: |
          echo "github.event_name = ${{ github.event_name }}"
          echo "github.ref = ${{ github.ref }}"
          echo "github.event.ref = ${{ github.event.ref }}"

          # If the event is delete, use the event ref
          if [ "${{ github.event_name }}" = delete ]; then
            GitRef="${{ github.event.ref }}"
          elif [ "${{ github.event_name }}" = pull_request ]; then
            GitRef="${{ github.head_ref }}"
          else
            GitRef="${{ github.ref }}"
          fi
          GitBranch=$(echo ${GitRef#refs/heads/})

          echo "Git Ref: $GitRef"
          echo "Git Branch Name: $GitBranch"
          echo "branch=$GitBranch" >> $GITHUB_OUTPUT
          echo "::notice::SaaS Account ID: $GitBranch"

  deploy:
    name: Deploy (${{ matrix.apps.name }})
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        apps:
        - name: SaaS
          dir: saas
          vercel-project-secret-name: VERCEL_PROJECT_ID_SAAS
        - name: V8
          dir: media
          vercel-project-secret-name: VERCEL_PROJECT_ID_MEDIA
    # env:
      # VERCEL_PROJECT_ID: ${{ secrets[matrix.apps.vercel-project-secret-name] }}
      # NEXT_PUBLIC_SAAS_ACCOUNT_ID: ${{ needs.prepare.outputs.git-branch }}
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/vercel-deploy
        id: vercel-deploy
        with:
          vercel-org-id: ${{ env.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets[matrix.apps.vercel-project-secret-name] }}
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-environment: ${{ env.VERCEL_ENVIRONMENT }}
          saas-account-id: ${{ needs.prepare.outputs.git-branch }}
      - run: |
          echo "::notice::${{ matrix.apps.name }} URL: ${{ steps.vercel-deploy.outputs.url }}"


      # - name: Install Vercel CLI
      #   run: npm install --global vercel@latest
      # - name: Pull Vercel Environment Information
      #   run: vercel pull --yes --environment=${{ env.VERCEL_ENVIRONMENT }} --token=${{ secrets.VERCEL_TOKEN }}
      # - name: Development Build
      #   if: github.ref != 'refs/heads/main'
      #   run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      # - name: Production build
      #   if: github.ref == 'refs/heads/main'
      #   run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      # - name: Deploy to Vercel
      #   run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} > deployment-url.txt
      # - name: Output Deployment URL
      #   run: |
      #     URL=$(cat deployment-url.txt)
      #     echo "${{ matrix.apps.dir }}-url=$URL" >> $GITHUB_OUTPUT
      #     echo "::notice::${{ matrix.apps.name }} URL: $URL"

  ingestor:
    name: Content Ingestor (${{ matrix.apps.name }})
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        apps:
        - name: SaaS
          vercel-project-secret-name: VERCEL_PROJECT_ID_SAAS
        - name: V8
          vercel-project-secret-name: VERCEL_PROJECT_ID_MEDIA
    env:
      VERCEL_PROJECT_ID: ${{ secrets[matrix.apps.vercel-project-secret-name] }}
    steps:
      - uses: actions/checkout@v3
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      # We're using the environment variables stored on Vercel. So we fetch and then use dotenv to output them into the runner
      - name: Pull Vercel Environment Information
        run: vercel env pull --yes --environment=${{ env.VERCEL_ENVIRONMENT }} --token=${{ secrets.VERCEL_TOKEN }}
      - id: dotenv
        uses: falti/dotenv-action@v1.0.1
      - uses: ./.github/actions/run-ingestor
        with:
          airtable-api-key: ${{ steps.dotenv.outputs.airtable_api_key }}
          airtable-base-id: ${{ steps.dotenv.outputs.airtable_base_id }}
          skylark-api-url: ${{ matrix.apps.name == 'SaaS' && steps.dotenv.outputs.next_public_saas_api_endpoint || steps.dotenv.outputs.next_public_skylark_api_url }}
          cognito-aws-region: ${{ steps.dotenv.outputs.cognito_aws_region }}
          cognito-client-id: ${{ steps.dotenv.outputs.cognito_client_id }}
          cognito-user-pool-id: ${{ steps.dotenv.outputs.cognito_user_pool_id }}
          cognito-identity-pool-id: ${{ steps.dotenv.outputs.cognito_identity_pool_id }}
          amplify-storage-bucket: ${{ steps.dotenv.outputs.amplify_storage_bucket }}
          cognito-email: ${{ steps.dotenv.outputs.cognito_email }}
          cognito-password: ${{ steps.dotenv.outputs.cognito_password }}
          create-additional-objects: "true"
          saas-ingest: ${{ matrix.apps.name == 'SaaS' && 'true' || 'false' }}
          saas-api-token: ${{ steps.dotenv.outputs.next_public_saas_api_key }}
          # Use git-branch as account-id so it matches Vercel
          saas-account-id: ${{ needs.prepare.outputs.git-branch }}

  signal:
    name: Signal
    runs-on: ubuntu-latest
    needs: [deploy, ingestor]
    if: always()
    steps:
      - uses: actions/github-script@v6
        id: additional-urls
        with:
          result-encoding: string
          script: |
            const json = JSON.stringify([
              { label: "Media", value: "${{ needs.deploy.outputs.media-url }}" },
              { label: "SaaS", value: "${{ needs.deploy.outputs.saas-url }}" },
            ]);
            return json;
      - uses: technote-space/workflow-conclusion-action@v2
      - name: Comment status on PR
        uses: ostmodern/comment-url-on-pr@v1
        with:
          title: ${{ env.pr-comment-title }}
          comment_id: ${{ env.pr-comment-id }}
          status: ${{ env.WORKFLOW_CONCLUSION }}
          github_token: ${{ github.token }}
          additional_urls: ${{ steps.additional-urls.outputs.result }}

  lighthouse-check:
    name: Lighthouse
    runs-on: ubuntu-latest
    needs: [deploy, ingestor]
    steps:
      - uses: actions/checkout@master
      - name: Lighthouse
        uses: foo-software/lighthouse-check-action@master
        with:
          device: "desktop"
          urls: ${{ needs.deploy.outputs.media-url }},${{ needs.deploy.outputs.media-url }}/movies,${{ needs.deploy.outputs.saas-url }},${{ needs.deploy.outputs.saas-url }}/movies
          gitHubAccessToken: ${{ github.token }}
          slackWebhookUrl: ${{ secrets.SLACK_ALERTS_FE_TESTING }}
          gitAuthor: ${{ github.actor }}
          gitBranch: ${{ github.repositoryUrl }}
          sha: ${{ github.sha }}
          prCommentEnabled: true
